import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import gc
import joblib

# TensorFlow Optimization (optional)
tf.config.optimizer.set_jit(True)

# Function to extract fingerprints and convert them into arrays
def extract_fingerprints(df, fingerprint_type='Morgan'):
    return np.array(df[fingerprint_type].apply(eval).tolist())

# Function to train the final DNN model
def final_dnn_model(X, y, units=64, n_layers=32, epochs=20, batch_size=16):
    model = Sequential()
    model.add(Dense(units, activation='relu', input_shape=(X.shape[1],)))
    
    for _ in range(n_layers):
        model.add(Dense(units, activation='relu'))
    
    model.add(Dense(1))  # Output layer
    model.compile(optimizer='adam', loss='mse')
    model.fit(X, y, epochs=epochs, batch_size=batch_size, verbose=1, validation_split=0.2)
    return model

if __name__ == "__main__":
    # Load the dataset
    data = pd.read_csv('dataset_train.csv')
    y = data['ACTIVITY'].values
    X = extract_fingerprints(data, 'Morgan')
    
    # Train the final model
    model = final_dnn_model(X, y, units=64, n_layers=32, epochs=20, batch_size=16)
    
    # Save the trained model
    model.save("dnn_model.h5")
    joblib.dump(model, "dnn_model.pkl")
    print("Final model saved successfully!")
    
    # Clear TensorFlow session to free memory
    tf.keras.backend.clear_session()
    del model
    gc.collect()


import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import KFold, GridSearchCV
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import gc
import joblib

# Function to compute QÂ²
def q2_score(y_true, y_pred, y_train):
    ss_total = np.sum((y_true - np.mean(y_train)) ** 2)
    ss_res = np.sum((y_true - y_pred) ** 2)
    return 1 - (ss_res / ss_total)

# Function to extract fingerprints and convert them into arrays
def extract_fingerprints(df, fingerprint_type='Morgan'):
    return np.array(df[fingerprint_type].apply(eval).tolist())

# Function to perform cross-validation and compute metrics
def cross_validate_model(model, X, y, model_name):
    kf = KFold(n_splits=5, shuffle=True, random_state=42)
    results = {'Model': [], 'R2': [], 'MAE': [], 'MSE': [], 'Q2': []}
    
    for train_index, test_index in kf.split(X):
        X_train, X_test = X[train_index], X[test_index]
        y_train, y_test = y[train_index], y[test_index]
        
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        
        # Compute metrics
        results['Model'].append(model_name)
        results['R2'].append(r2_score(y_test, y_pred))
        results['MAE'].append(mean_absolute_error(y_test, y_pred))
        results['MSE'].append(mean_squared_error(y_test, y_pred))
        results['Q2'].append(q2_score(y_test, y_pred, y_train))
        
        # Memory cleanup
        gc.collect()
    
    return pd.DataFrame(results)

if __name__ == "__main__":
    # Load dataset
    data = pd.read_csv('dataset_train.csv')
    y = data['ACTIVITY'].values
    X = extract_fingerprints(data, 'Morgan')
    
    # Define models and parameters
    models = {
        'SVM': SVR(kernel='rbf', C=6, epsilon=0.12),
        'Random Forest': RandomForestRegressor(n_estimators=200, max_depth=15, random_state=42),
        'XGBoost': XGBRegressor(n_estimators=200, max_depth=10, learning_rate=0.1, random_state=42, use_label_encoder=False, eval_metric='rmse')
    }
    
    results_df = pd.DataFrame()
    
    for model_name, model in models.items():
        print(f"Training {model_name}...")
        model_results = cross_validate_model(model, X, y, model_name)
        results_df = pd.concat([results_df, model_results], ignore_index=True)
    
    print("Cross-validation results:")
    print(results_df)
    results_df.to_csv('ml_models_results.csv', index=False)
    joblib.dump(models, "trained_ml_models.pkl")
    print("Models saved successfully!")
